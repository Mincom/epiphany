---
# download-requirements-done.flag file is used to avoid re-downloading requirements (to save time)
# this is to be optimized in the future

- name: Check if flag file exists
  stat:
    path: /tmp/epi-download-requirements/download-requirements-done.flag
  register: stat_result

- name: Remove download-requirements-done.flag file if expired
  file:
    path: /tmp/epi-download-requirements/download-requirements-done.flag
    state: absent
  when:
    - stat_result.stat.exists
    - (ansible_date_time.epoch|int - stat_result.stat.mtime) > (60 * specification.download_done_flag_expire_minutes)

- name: Check whether to run download script
  stat:
    path: /tmp/epi-download-requirements/download-requirements-done.flag
  register: stat_result

- name: Detect system sources file /etc/apt/sources.list
  stat:
    path: /etc/apt/sources.list
  register: system_sources_list_result

# this is to fix a situation when I re-run the ansible stage and hit the error
# firewalld pacakge not exists. Get in the system the condition is we have no
# repo sources at all. It is probably died before the tear down process
# TODO I have put down the run download requirement after deploying files in
# setup repo, this block might not needed iny more
#- name: Detect epirepo source list file
#  stat:
#    path: /etc/apt/sources.list.d/epirepo.list
#  register: epirepo_list_result
#
#- name: Detect epirepo backup source list file
#  stat:
#    path: /etc/apt/sources.list.d/epirepo.list.bak
#  register: epirepo_list_backup_result
#
#- name: Detect /var/tmp/enabled-system-repos.tar
#  stat:
#    path: /var/tmp/enabled-system-repos.tar
#  register: enabled_system_repos_result
#
#- name: Restore the system repo as last resort
#  unarchive:
#    remote_src: yes
#    src: /var/tmp/enabled-system-repos.tar
#    dest: "/etc/apt"
#    creates: "/etc/apt/sources.list"
#    extra_opts: [--strip-components=2]
#  when:
#    - 'not system_sources_list_result.stat.exists'
#    - 'not epirepo_list_result.stat.exists'
#    - 'not epirepo_list_backup_result.stat.exists'
#    - 'enabled_system_repos_result.stat.exists'
# end

- name: |-
    Run download-requirements script, this can take a long time
    You can check progress on repository host with: journalctl -f -t download-requirements.sh
  shell: >-
    set -o pipefail && /tmp/epi-download-requirements/download-requirements.sh /var/www/html/epirepo --no-logfile |&
    tee >(systemd-cat --identifier=download-requirements.sh)
  args:
    executable: /bin/bash
  when: not stat_result.stat.exists

- name: Create flag file to not re-download requirements next time
  file:
    path: /tmp/epi-download-requirements/download-requirements-done.flag
    state: touch
  when: not stat_result.stat.exists
